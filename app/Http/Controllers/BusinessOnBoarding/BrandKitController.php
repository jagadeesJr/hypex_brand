<?php

namespace App\Http\Controllers\BusinessOnBoarding;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Models\BrandKit;
use App\Models\Feedback;
use App\Models\Reviews;
use App\Helpers\Helpers;

class BrandKitController extends Controller
{

    /**
     * The function `createBrandKit` in PHP validates and creates a brand kit based on the provided
     * request data.
     *
     * @param Request request The `createBrandKit` function is a PHP function that receives a `Request`
     * object as a parameter. This function is responsible for creating a brand kit based on the data
     * provided in the request.
     *
     * @return \Illuminate\Http\JsonResponse `createBrandKit` function is returning different responses based on the outcome of the
     * operation:
     */
    public function createBrandKit(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'business_id' => 'required|exists:brand_business,id',
                'font_family' => 'required|string|max:255',
                'color_code' => 'required|string|max:7',
                'images' => 'required|array',
                'images.*' => 'string'
            ]);

            if ($validator->fails()) {
                return Helpers::ifValidatorFails($validator);
            }

            $BrandKit = BrandKit::create($request->all());
            if ($BrandKit) {
                return Helpers::createResponse('BrandKit created', $BrandKit);
            } else {
                return Helpers::failResponse('BrandKit created');
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }


    /**
     * The `readBrandKit` function retrieves brand kits with associated businesses and handles
     * exceptions gracefully.
     *
     * @return \Illuminate\Http\JsonResponse `readBrandKit()` function returns either a success response with the message
     * 'brandKits find' and the retrieved brand kits if they are found, or a failure response with the
     * message 'brandKits found' if no brand kits are found. If an exception occurs during the process,
     * the function returns a response generated by the `catchResponse()` method in the `Helpers` class.
     */
    public function readBrandKit()
    {
        try {
            $brandKits = BrandKit::with('business')->get();

            if ($brandKits->isEmpty()) {
                return Helpers::failResponse('brandKits found');
            }
            return Helpers::successResponse('brandKits find', $brandKits);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }

    /**
     * The function `indexBrandKit` retrieves a BrandKit with its associated business based on the
     * provided ID and returns success or failure responses accordingly.
     *
     * @param Request request The `indexBrandKit` function takes a `Request` object as a parameter. This
     * object is used to retrieve the `id` from the request data. The `id` is then used to fetch a
     * `BrandKit` record along with its related `business` data.
     *
     * @return \Illuminate\Http\JsonResponse `indexBrandKit` function is attempting to find a `BrandKit` with the specified ID
     * along with its related `business` model. If the `BrandKit` is found, a success response with the
     * `brandKit` data is returned. If the `BrandKit` is not found, a failure response indicating that
     * the `brandKit` was not found is returned. If an exception
     */
    public function indexBrandKit(Request $request)
    {
        try {
            $brandKit = BrandKit::with('business')->findOrFail($request->id);

            if ($brandKit->isEmpty()) {
                return Helpers::failResponse('brandKit found');
            }
            return Helpers::successResponse('brandKit find', $brandKit);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }

    /**
     * The function `updateBrandKit` in PHP updates a BrandKit model based on the data provided in the
     * request, with validation and error handling included.
     *
     * @param Request request The `updateBrandKit` function is used to update a BrandKit record based on
     * the provided request data. Here are the parameters expected in the request:
     *
     * @return \Illuminate\Http\JsonResponse `updateBrandKit` function returns a response based on the outcome of updating a
     * BrandKit entity. If the validation fails, it returns the validation errors. If the BrandKit is
     * successfully updated, it returns a success response with the updated BrandKit data. If the update
     * fails for any reason, it returns a failure response. If an exception is caught during the process,
     * it returns a response based
     */
    public function updateBrandKit(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'font_family' => 'string|max:255',
                'color_code' => 'string|max:7',
                'images' => 'array',
                'images.*' => 'string'
            ]);

            if ($validator->fails()) {
                return Helpers::ifValidatorFails($validator);
            }

            $brandKit = BrandKit::findOrFail($request->id);
            $brandKit->update($request->all());
            if ($brandKit) {
                return Helpers::successResponse('BrandKit updated', $brandKit);
            } else {
                return Helpers::failResponse('BrandKit updated');
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }


    /**
     * The function `deleteBrandKit` deletes a BrandKit record based on the provided ID and returns a
     * JSON response indicating the success or failure of the operation.
     *
     * @param Request request The `deleteBrandKit` function is a PHP function that takes a `Request`
     * object as a parameter. The `Request` object is typically used in Laravel applications to handle
     * incoming HTTP requests.
     *
     * @return \Illuminate\Http\JsonResponse `deleteBrandKit` function is returning a JSON response with a status of true and a
     * message indicating that the BrandKit was deleted successfully if the deletion operation is
     * successful. If an exception occurs during the deletion process, the function will return the
     * response generated by the `catchResponse` method from the `Helpers` class.
     */
    public function deleteBrandKit(Request $request)
    {
        try {
            $brandKit = BrandKit::findOrFail($request->id);
            $brandKit->delete();

            return response()->json([
                'status' => true,
                'message' => 'BrandKit deleted successfully'
            ], 200);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }


}
