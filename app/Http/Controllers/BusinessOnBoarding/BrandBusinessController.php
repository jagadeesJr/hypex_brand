<?php

namespace App\Http\Controllers\BusinessOnBoarding;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Models\BrandBusiness;
use App\Models\BrandServices;
use App\Models\BrandProducts;
use App\Models\Category;
use App\Models\SubCategory;
use App\Helpers\Helpers;


class BrandBusinessController extends Controller
{
   /**
    * The function `createBrandBusiness` in PHP validates and creates a new BrandBusiness entity with
    * specific fields and relationships.
    *
    * @param Request request The `createBrandBusiness` function is responsible for creating a new
    * BrandBusiness based on the provided request parameters. Let's break down the validation and
    * creation process step by step:
    *
    * @return The `createBrandBusiness` function is returning different responses based on the outcome
    * of the validation and database operations:
    */
    public function createBrandBusiness(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'business_name' => 'required|string|max:255',
                'brand_id' => 'required|integer|exists:brand_users,id',
                'description' => 'nullable|string',
                'branch_area' => 'nullable|array',
                'categories' => 'nullable|array',
                'subcategories' => 'nullable|array',
                'target_audience' => 'nullable|string|max:255',
                'business_hours' => 'nullable|array',
                'interests' => 'nullable|string',
            ]);
            if ($validator->fails()) {
                return Helpers::ifValidatorFails($validator);
            }
            $BrandBusinessExist = BrandBusiness::where('brand_id', $request->brand_id)->where('business_name', $request->business_name)->first();
            if ($BrandBusinessExist) {
                return Helpers::existResponse('BrandBusiness name');
            }
            if ($request->has('categories')) {
                foreach ($request->categories as $categoryName) {
                    $category = Category::firstOrCreate(['name' => $categoryName, 'status' => true]);
                }
            }
            if ($request->has('subcategories')) {
                foreach ($request->subcategories as $subcategoryName) {
                    $subcategory = SubCategory::firstOrCreate(['name' => $subcategoryName, 'category_id' => $category->id, 'status' => true]);
                }
            }
            $BrandBusiness = BrandBusiness::create($request->all());
            if ($BrandBusiness) {
                return Helpers::createResponse('BrandBusiness created', $BrandBusiness);
            } else {
                return Helpers::failResponse('BrandBusiness created');
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }

  /**
   * The function `readBrandBusiness` retrieves all BrandBusiness data and returns a success response
   * if data is found, or a failure response if no data is found.
   *
   * @return The `readBrandBusiness` function is returning either a success response with the message
   * 'BrandBusiness find' and the collection of BrandBusiness models if they are found, or a failure
   * response with the message 'BrandBusiness not found' if no BrandBusiness models are found. If an
   * exception is caught during the process, the function will return a response generated by the
   * `catchResponse` method in the `
   */
    public function readBrandBusiness()
    {
        try {
            $BrandBusiness = BrandBusiness::all();
            if ($BrandBusiness->isEmpty()) {
                return Helpers::failResponse('BrandBusiness found');
            }
            return Helpers::successResponse('BrandBusiness find', $BrandBusiness);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }
   /**
    * This PHP function retrieves a BrandBusiness record based on the provided ID and returns a success
    * or failure response accordingly.
    *
    * @param Request request The `indexBrandBusiness` function takes a `Request` object as a parameter.
    * This object is typically used to retrieve input data from the HTTP request, such as form data or
    * query parameters. In this case, the function is trying to find a `BrandBusiness` model based on
    * the `id
    *
    * @return The `indexBrandBusiness` function is returning either a failure response with the message
    * 'BrandBusiness found' if the BrandBusiness with the specified ID is not found, or a success
    * response with the message 'BrandBusiness find' along with the retrieved BrandBusiness data if the
    * BrandBusiness is found. If an exception occurs during the process, the function will return a
    * response generated by the `catchResponse`
    */
    public function indexBrandBusiness(Request $request)
    {
        try {
            $BrandBusiness = BrandBusiness::find($request->id);

            if (!$BrandBusiness) {
                return Helpers::failResponse('BrandBusiness found');
            }
            return Helpers::successResponse('BrandBusiness find', $BrandBusiness);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }

   /**
    * The function `updateBrandBusiness` in PHP validates and updates a BrandBusiness entity, checking
    * for existing duplicates and handling exceptions.
    *
    * @param Request request The `updateBrandBusiness` function is responsible for updating a
    * BrandBusiness record based on the provided request data. Let's break down the validation rules
    * and the logic implemented in this function:
    *
    * @return The `updateBrandBusiness` function is returning different responses based on the outcome
    * of the update operation:
    */
    public function updateBrandBusiness(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'id' => 'required|integer|exists:brand_business,id',
                'business_name' => 'required|string|max:255',
                'brand_id' => 'required|integer|exists:brand_users,id',
                'description' => 'nullable|string',
                'branch_area' => 'nullable|array',
                'categories' => 'nullable|array',
                'subcategories' => 'nullable|array',
                'target_audience' => 'nullable|string|max:255',
                'business_hours' => 'nullable|array',
                'interests' => 'nullable|string',
            ]);

            if ($validator->fails()) {
                return Helpers::ifValidatorFails($validator);
            }

            $BrandBusinessExist = BrandBusiness::where('id', '!=', $request->id)
                ->where('brand_id', $request->brand_id)
                ->where('business_name', $request->business_name)
                ->first();

            if ($BrandBusinessExist) {
                return Helpers::existResponse('BrandBusiness name');
            }

            $BrandBusiness = BrandBusiness::findOrFail($request->id);
            $updated = $BrandBusiness->update($request->all());

            if ($updated) {
                return Helpers::successResponse('BrandBusiness updated', $BrandBusiness);
            } else {
                return Helpers::failResponse('BrandBusiness updated');
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }
  /**
   * The function `deleteBrandBusiness` deletes a BrandBusiness record based on the provided ID and
   * returns a JSON response indicating success or failure.
   *
   * @param Request request The `deleteBrandBusiness` function is responsible for deleting a
   * `BrandBusiness` record based on the provided ID in the request. Here is a breakdown of the
   * function:
   *
   * @return The `deleteBrandBusiness` function is returning a JSON response. If the deletion of the
   * `BrandBusiness` is successful, it returns a JSON response with status true and a success message.
   * If the deletion fails, it returns a JSON response with status false and an error message. In case
   * of any exceptions during the deletion process, it calls the `catchResponse` method from the
   * `Helpers` class
   */
    public function deleteBrandBusiness(Request $request)
    {
        try {
            $BrandBusiness = BrandBusiness::findOrFail($request->id);
            if ($BrandBusiness->delete()) {
                return response()->json([
                    'status' => true,
                    'message' => 'BrandBusiness deleted successfully'
                ]);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'Failed to delete BrandBusiness'
                ], 500);
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }



















    //Brand Service

  /**
   * The function `createBrandService` in PHP validates and creates a new brand service based on the
   * provided request data.
   *
   * @param Request request The `createBrandService` function is responsible for creating a new brand
   * service based on the provided request data. Here is a breakdown of the validation rules for the
   * request parameters:
   *
   * @return The `createBrandService` function is returning a response based on the outcome of the
   * validation and creation process. Here is a breakdown of the possible return scenarios:
   */
    public function createBrandService(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'business_id' => 'required|exists:brand_business,id',
                'name' => 'required|string|max:255',
                'duration' => 'required',
                'price' => 'required',
                'tax' => 'nullable',
                'discount' => 'nullable',
                'description' => 'nullable|string',
            ]);

            if ($validator->fails()) {
                return Helpers::ifValidatorFails($validator);
            }

            $service = BrandServices::create($request->all());
            if ($service) {
                return Helpers::createResponse('Brand Services created', $service);
            } else {
                return Helpers::failResponse('Brand Services created');
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }

  /**
   * The function `readBrandService` retrieves brand services with associated businesses and handles
   * exceptions.
   *
   * @return The `readBrandService()` function is returning either a failure response with the message
   * "Brand Service found" if the `` collection is empty, or a success response with the
   * message "Brand Service find" along with the `` collection if it is not empty. If an
   * exception is caught during the execution of the function, it will return a response generated by
   * the `catchResponse()` method
   */
    public function readBrandService()
    {
        try {
            $services = BrandServices::with('business')->get();

            if ($services->isEmpty()) {
                return Helpers::failResponse('Brand Service found');
            }

            return Helpers::successResponse('Brand Service find', $services);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }

  /**
   * The function `indexBrandService` retrieves a Brand Service with its associated business using the
   * provided ID and returns a success or failure response accordingly.
   *
   * @param Request request The `indexBrandService` function takes a `Request` object as a parameter.
   * This object is used to retrieve the `id` from the request data. The function then attempts to find
   * a `BrandServices` model with the corresponding `id` along with its related `business` model.
   *
   * @return The `indexBrandService` function is returning either a failure response with the message
   * 'Brand Service found' if the service is not found, or a success response with the message 'Brand
   * Service find' along with the service data if the service is found. If an exception is caught
   * during the process, a catch response is returned based on the exception.
   */
    public function indexBrandService(Request $request)
    {
        try {
            $service = BrandServices::with('business')->find($request->id);
            if (!$service) {
                return Helpers::failResponse('Brand Service found');
            }
            return Helpers::successResponse('Brand Service find', $service);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }


   /**
    * The function `updateBrandService` in PHP updates a brand service based on the provided request
    * data and returns success or failure responses.
    *
    * @param Request request - business_id: The ID of the business associated with the brand service
    * (required, must exist in the brand_business table)
    *
    * @return The `updateBrandService` function is returning different responses based on the outcome
    * of the update operation:
    */
    public function updateBrandService(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'business_id' => 'required|exists:brand_business,id',
                'name' => 'required|string|max:255',
                'duration' => 'required',
                'price' => 'required',
                'tax' => 'nullable',
                'discount' => 'nullable',
                'description' => 'nullable|string',
            ]);

            if ($validator->fails()) {
                return Helpers::ifValidatorFails($validator);
            }

            $service = BrandServices::find($request->id);

            if (!$service) {
                return Helpers::failResponse('Brand Service found');
            }

            $service->update($request->all());

            if ($service) {
                return Helpers::successResponse('Brand Service updated', $service);
            } else {
                return Helpers::failResponse('Brand Service updated');
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }


   /**
    * The function `deleteBrandService` deletes a brand service based on the provided ID and returns a
    * JSON response indicating success or failure.
    *
    * @param Request request The `deleteBrandService` function takes a `Request` object as a parameter.
    * This object contains the data sent with the HTTP request to the server. In this case, the
    * function expects the `id` of the brand service to be deleted, which is accessed using
    * `->id`.
    *
    * @return The `deleteBrandService` function returns a JSON response with a status and message
    * indicating whether the service was successfully deleted or not. If the service is not found, it
    * returns a 404 status with a message 'Service not found'. If an exception occurs during the
    * deletion process, it returns a response generated by the `Helpers::catchResponse` method.
    */
    public function deleteBrandService(Request $request)
    {
        try {
            $service = BrandServices::find($request->id);

            if (!$service) {
                return response()->json([
                    'status' => false,
                    'message' => 'Service not found'
                ], 404);
            }

            $service->delete();

            return response()->json([
                'status' => true,
                'message' => 'Service deleted successfully'
            ], 200);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }


















    //Brand Product


  /**
   * The function `createBrandProducts` validates and creates a new brand product based on the provided
   * request data.
   *
   * @param Request request The `createBrandProducts` function is used to create a new product for a
   * brand based on the provided request data. Here is a breakdown of the validation rules for the
   * request parameters:
   *
   * @return The `createBrandProducts` function is returning a response based on the outcome of the
   * validation and creation process. Here are the possible return scenarios:
   */
    public function createBrandProducts(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'business_id' => 'required|exists:brand_business,id',
                'name' => 'required|string|max:255',
                'price' => 'required',
                'tax' => 'nullable',
                'discount' => 'nullable',
                'description' => 'nullable|string',
            ]);

            if ($validator->fails()) {
                return Helpers::ifValidatorFails($validator);
            }

            $product = BrandProducts::create($request->all());
            if ($product) {
                return Helpers::createResponse('product created', $product);
            } else {
                return Helpers::failResponse('product created');
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }

   /**
    * The function `readBrandProducts` retrieves brand products with associated businesses and handles
    * exceptions gracefully.
    *
    * @return The `readBrandProducts` function is returning either a success response with the message
    * 'Brand Products find' and the retrieved products, or a failure response with the message 'Brand
    * Products found' if no products are found. If an exception occurs during the process, the function
    * will return a response generated by the `catchResponse` method in the `Helpers` class.
    */
    public function readBrandProducts()
    {
        try {
            $products = BrandProducts::with('business')->get();

            if ($products->isEmpty()) {
                return Helpers::failResponse('Brand Products found');
            }
            return Helpers::successResponse('Brand Products find', $products);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }

   /**
    * The function retrieves a specific brand product with its associated business and returns a
    * success or failure response.
    *
    * @param Request request The `indexBrandProducts` function takes a `Request` object as a parameter.
    * This object is used to retrieve data from the HTTP request made to the server. In this case, the
    * function is expecting an `id` parameter to be passed in the request.
    *
    * @return If the `` is found based on the provided `id`, a success response with the
    * message 'Brand Products find' and the product data will be returned. If the `` is not
    * found, a failure response with the message 'Brand Products found' will be returned. If an
    * exception occurs during the process, the catchResponse method from the Helpers class will handle
    * the exception and return an
    */
    public function indexBrandProducts(Request $request)
    {
        try {
            $product = BrandProducts::with('business')->find($request->id);

            if (!$product) {
                return Helpers::failResponse('Brand Products found');
            }
            return Helpers::successResponse('Brand Products find', $product);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }


  /**
   * The function `updateBrandProducts` in PHP updates a brand product based on the provided request
   * data and returns success or failure responses accordingly.
   *
   * @param Request request The `updateBrandProducts` function is used to update a brand product based
   * on the provided request data. Here is a breakdown of the parameters expected in the request:
   *
   * @return This function is updating brand products based on the data provided in the request. Here
   * is what is being returned based on different scenarios:
   */
    public function updateBrandProducts(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'business_id' => 'required|exists:brand_business,id',
                'name' => 'required|string|max:255',
                'price' => 'required',
                'tax' => 'nullable',
                'discount' => 'nullable',
                'description' => 'nullable|string',
            ]);

            if ($validator->fails()) {
                return Helpers::ifValidatorFails($validator);
            }
            $product = BrandProducts::find($request->id);
            if (!$product) {
                return Helpers::failResponse('Brand Products found');
            }
            $product->update($request->all());
            if ($product) {
                return Helpers::successResponse('Brand Products updated', $product);
            } else {
                return Helpers::failResponse('Brand Products updated');
            }
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }


   /**
    * The function `deleteBrandProducts` deletes a product associated with a brand based on the
    * provided ID and returns a JSON response indicating the success or failure of the deletion.
    *
    * @param Request request  is an instance of the Request class, which is used to retrieve
    * input data from the HTTP request. In this context, it is used to get the 'id' parameter from the
    * request to identify the BrandProduct that needs to be deleted.
    *
    * @return This function is deleting a product from the database based on the provided ID. If the
    * product is found and successfully deleted, it will return a JSON response with status true and a
    * success message. If the product is not found, it will return a JSON response with status false
    * and a message indicating that the product was not found. If an exception occurs during the
    * deletion process, it will return the response generated
    */
    public function deleteBrandProducts(Request $request)
    {
        try {
            $product = BrandProducts::find($request->id);

            if (!$product) {
                return response()->json([
                    'status' => false,
                    'message' => 'Product not found'
                ], 404);
            }

            $product->delete();

            return response()->json([
                'status' => true,
                'message' => 'Product deleted successfully'
            ], 200);
        } catch (\Exception $e) {
            return Helpers::catchResponse($e);
        }
    }
}
